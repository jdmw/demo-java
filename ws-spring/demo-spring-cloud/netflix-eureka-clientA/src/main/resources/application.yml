server:
  port: 8771
spring:
  application:
    name: eureka-client-a

#cluster: eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka,http://localhost:8763/eureka/
eureka:
  #  instance:
  #    hostname: localhost
  client:
    enabled: true
    #    registerWithEureka: false
    #    fetchRegistry: false
    serviceUrl:
      #defaultZone: http://localhost:8761/eureka/
      defaultZone : http://peer1:8761/eureka,http://peer2:8762/eureka,http://peer3:8763/eureka

    # https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/#authenticating-with-the-eureka-server
    # 1.3 Authenticating with the Eureka Server
    tls:
      # generate a jks certification:
      #   keytool -genkey -alias projectname -keyalg RSA -keysize 1024 -validity 36500 -keystore /work/inf/projectname/src/main/resources/projectname.keystore -keypass pass1234 -storepass pass1234 -dname "CN=pass1234,OU=pass1234,O=pass1234,L=pass1234,ST=pass1234,C=CN"
      #   keytool -genkey -alias demo-spring-cloud -keyalg RSA -keysize 1024 -validity 36500 -keystore /work/demo/demo-java/ws-spring/demo-spring-cloud/netflix-eureka-client/src/main/resources/demo-spring-cloud.keystore -keypass pass1234 -storepass pass1234 -dname "CN=pass1234,OU=pass1234,O=pass1234,L=pass1234,ST=pass1234,C=CN"
      # generate a PKCS12 certification:
      #   openssl pkcs12 -export -chain -CAfile RootCA.pem -in server.pem -inkey serverkey.pem -out server.p12 -passout pass:123
      enabled: false
      #protocol: TLS
      key-store: classpath:demo-spring-cloud.keystore
      key-store-type: JKS # default: PKCS12
      key-store-password: pass1234 # default: <empty>
      key-password: pass1234 # default: <empty>
      trust-store: classpath:demo-spring-cloud.keystore
      trust-store-type: JKS # default: PKCS12
      trust-store-password: pass1234 # default: <empty>


